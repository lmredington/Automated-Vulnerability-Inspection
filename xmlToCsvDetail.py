import xml.etree.ElementTree as ET
import csv
import subprocess
import html
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font, Border, Side

def format_csv(file_name):
    # Specify the CSV file name
    csv_file_name = file_name
    
    # Specify the Excel file name
    excel_file_name = file_name.replace(".csv", "Cvs.xlsx")

    # Read data from the CSV file
    with open(csv_file_name, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        data = list(csv_reader)

    # Create a new workbook and add a worksheet
    workbook = Workbook()
    worksheet = workbook.active

    # Writing data to the worksheet
    for row in data:
        worksheet.append(row)
        
    # Format "PortID" column
    portid_column = worksheet.column_dimensions['A']
    portid_column.width = 6.5
    # Bold specific cells and add a bottom border
    portid_cell = worksheet['A1']
    portid_cell.font = Font(bold=True)
    portid_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "protocol" column
    protocol_column = worksheet.column_dimensions['B']
    protocol_column.width = 8.5
    # Bold specific cells and add a bottom border
    protocol_cell = worksheet['B1']
    protocol_cell.font = Font(bold=True)
    protocol_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Service" column
    service_column = worksheet.column_dimensions['C']
    service_column.width = 10
    # Bold specific cells and add a bottom border
    service_cell = worksheet['C1']
    service_cell.font = Font(bold=True)
    service_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "ScriptID" column
    scriptId_column = worksheet.column_dimensions['D']
    scriptId_column.width = 24.5
    # Bold specific cells and add a bottom border
    scriptId_cell = worksheet['D1']
    scriptId_cell.font = Font(bold=True)
    scriptId_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "CVE" column
    cve_column = worksheet.column_dimensions['E']
    cve_column.width = 14.5
    # Bold specific cells and add a bottom border
    cve_cell = worksheet['E1']
    cve_cell.font = Font(bold=True)
    cve_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Title" column
    title_column = worksheet.column_dimensions['F']
    title_column.width = 26
    for cell in worksheet['F']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    title_cell = worksheet['F1']
    title_cell.font = Font(bold=True)
    title_cell.border = Border(bottom=Side(border_style='thin'))
        
    # Format "State" column
    state_column = worksheet.column_dimensions['G']
    state_column.width = 25.5
    for cell in worksheet['G']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    state_cell = worksheet['G1']
    state_cell.font = Font(bold=True)
    state_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Description" column
    description_column = worksheet.column_dimensions['H']
    description_column.width = 76
    for cell in worksheet['H']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    description_cell = worksheet['H1']
    description_cell.font = Font(bold=True)
    description_cell.border = Border(bottom=Side(border_style='thin'))    
    
    # Format "References" column
    references_column = worksheet.column_dimensions['I']
    references_column.width = 76
    for cell in worksheet['I']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    references_cell = worksheet['I1']
    references_cell.font = Font(bold=True)
    references_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Center the content in columns A and B
    for row in worksheet.iter_rows(min_row=2, max_col=1, max_row=worksheet.max_row):  # Assuming data starts from the second row
        for cell in row:
            cell.alignment = Alignment(horizontal='right')
    
    # Save the workbook
    workbook.save(excel_file_name)

    print(f'Formatted Excel file "{excel_file_name}" created successfully.')
    return 1
    
"""
def run_command(command):
    print("Running", command)
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # Get the output and error
    output, error = process.communicate()

    # Print the output and error
    print("Output:", output.decode())
    print("Error:", error.decode())
    return 0

ip_command = "nmap -sn 192.168.1.0/24"
run_command(ip_command)

# Get user input
user_input = input("Enter IP Address: ")

# Print the user input
print("You entered:", user_input)

scan_command = "nmap -Pn -oA nmapscanCVE " + user_input

run_command(scan_command)

'''scan_command = "nmap -Pn --script vuln -oA nmapscanCVE " + user_input'''
"""

# Parse the XML file
tree = ET.parse('nmapScanExample.xml')
root = tree.getroot()

# Create CSV file
csv_filename = "scan.csv"

ports = root.findall(".//port")

# Create a CSV file
with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ["PortID", "Protocol", "Service", "ScriptID","CVE", "Title", "State", "Description", "References"]
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    # Write header
    writer.writeheader()

    # Write data for each port
    for port in ports:
        port_id = port.get("portid", '')
        protocol = port.get("protocol", '')
        service = port.find('.//service').attrib['name']
        scripts = port.findall(".//script")
        for script in scripts:
            hasVuln=0
            script_id = script.get("id")
            tables = script.findall(".//table")
            for table in tables:
                key_attr = table.get("key")
                if key_attr and key_attr.startswith("CVE-") or key_attr.startswith("NMAP-"):
                    hasVuln=1
                    # Find the <table key="refs"> element
                    table_refs = table.find(".//table[@key='refs']")
                    # Extract <elem> values within the <table key="ids"> element
                    elem_values = [elem.text for elem in table_refs.findall(".//elem")]
                    title = table.find(".//elem[@key='title']").text if table.find(".//elem[@key='title']") is not None else ''
                    state = table.find(".//elem[@key='state']").text if table.find(".//elem[@key='state']") is not None else ''
                    description = table.find(".//table[@key='description']/elem").text if table.find(".//table[@key='description']/elem") is not None else ''
                    description = description.strip("[]").replace("\n", "")
                    # Write Data
                    writer.writerow({'PortID': port_id, 'Protocol': protocol, 'Service': service, "ScriptID": script_id, 'CVE': key_attr, 'Title': title, 'State': state, 'Description': description, 'References': elem_values})
            if hasVuln==0:
                description = script.get("output")
                description = description.strip("[]").replace("\n", "")
                # Write Data
                writer.writerow({'PortID': port_id, 'Protocol': protocol, 'Service': service, 'ScriptID': script_id, 'Description': description})

print(f'CVE information exported to {csv_filename}')

format_csv(csv_filename)

