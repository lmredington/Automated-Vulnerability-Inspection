import xml.etree.ElementTree as ET
import csv
import subprocess
import html
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font, Border, Side
import json
import re
import os
import pandas as pd

#fieldnames = ["PortID", "Protocol", "Service", "ScriptID","CVE", "Title", "State", "Description", "References", "Base Score", "Base Severity", "Exploitability Score", "Impact Score", "Attack Complexity", "Confidentiality Impact", "Integrity Impact", "Availability Impact"]

fieldnames = ["PortID", "Protocol", "Service", "ScriptID","CVE", "Base Score", "Base Severity", "Exploitability Score", "Impact Score", "Attack Complexity", "Confidentiality Impact", "Integrity Impact", "Availability Impact", "Title", "State", "Description", "References"]

# Function to find impact data by CVE ID
def find_impact_by_id(cve_id, json_data):
    for cve_item in json_data.get("CVE_Items", []):
        cve_data = cve_item.get("cve", {})
        if cve_data.get("CVE_data_meta", {}).get("ID") == cve_id:
            cve_impact = cve_item.get("impact",{}).get("baseMetricV3", {})
            return cve_impact
    return None
    
def get_jsonFile(CVEid):
    pattern = r"CVE-(\d+)-\d+"
    # Use re.search() to find the match in the string
    match = re.search(pattern, CVEid)
    # Check if a match is found
    if match:
        # Extract the first group (CVE number) from the match
        cve_number = match.group(1)  
        #cve_file=r"C:\Users\linds\Downloads\Automated-Vulnerability-Inspection-main\Automated-Vulnerability-Inspection-main\CVE-DataSheets\nvdcve-1.1-"+cve_number+".json"
        cve_file = r"CVE-DataSheets\nvdcve-1.1-"+cve_number+".json"
        if os.path.exists(cve_file):
            print(f"The file at {cve_file} exists.")
            with open(cve_file, 'r', encoding='ISO-8859-1') as file:
                data = json.load(file)
                impact_data = find_impact_by_id(CVEid, data)
                
                if impact_data:
                    #print("Impact Data for CVE ID", CVEid, ":", json.dumps(impact_data, indent=2))
                    return impact_data
                else:
                    print("CVE ID", CVEid, "not found in the JSON object.")
                    file.close()
        else: 
            print(f"The file at {cve_file} does not exist.")
        

def format_csv(csv_file_path):
    # Specify the Excel file name
    excel_file_path = csv_file_path.replace(".csv", "-Formatted.xlsx")

    # Read data from the CSV file
    with open(csv_file_path, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        data = list(csv_reader)

    # Create a new workbook and add a worksheet
    workbook = Workbook()
    worksheet = workbook.active
    worksheet.title = "NMAP Scan Info"
    
    if os.path.exists(excel_file_path):
        os.remove(excel_file_path)

    # Writing data to the worksheet
    for row in data:
        worksheet.append(row)
        
    # Move Vulnerabilities with NMAP/CVE up to top
    # <>
        
    # Format "PortID" column
    portid_column = worksheet.column_dimensions['A']
    portid_column.width = 6.5
    # Bold specific cells and add a bottom border
    portid_cell = worksheet['A1']
    portid_cell.font = Font(bold=True)
    portid_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "protocol" column
    protocol_column = worksheet.column_dimensions['B']
    protocol_column.width = 8.5
    # Bold specific cells and add a bottom border
    protocol_cell = worksheet['B1']
    protocol_cell.font = Font(bold=True)
    protocol_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Service" column
    service_column = worksheet.column_dimensions['C']
    service_column.width = 10
    # Bold specific cells and add a bottom border
    service_cell = worksheet['C1']
    service_cell.font = Font(bold=True)
    service_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "ScriptID" column
    scriptId_column = worksheet.column_dimensions['D']
    scriptId_column.width = 24.5
    # Bold specific cells and add a bottom border
    scriptId_cell = worksheet['D1']
    scriptId_cell.font = Font(bold=True)
    scriptId_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "CVE" column
    cve_column = worksheet.column_dimensions['E']
    cve_column.width = 14.5
    # Bold specific cells and add a bottom border
    cve_cell = worksheet['E1']
    cve_cell.font = Font(bold=True)
    cve_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Title" column
    # old: F
    title_column = worksheet.column_dimensions['N']
    title_column.width = 26
    for cell in worksheet['N']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    title_cell = worksheet['N1']
    title_cell.font = Font(bold=True)
    title_cell.border = Border(bottom=Side(border_style='thin'))
        
    # Format "State" column
    # old: G
    state_column = worksheet.column_dimensions['O']
    state_column.width = 25.5
    for cell in worksheet['O']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    state_cell = worksheet['O1']
    state_cell.font = Font(bold=True)
    state_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Description" column
    # old: H
    description_column = worksheet.column_dimensions['P']
    description_column.width = 76
    for cell in worksheet['P']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    description_cell = worksheet['P1']
    description_cell.font = Font(bold=True)
    description_cell.border = Border(bottom=Side(border_style='thin'))    
    
    # Format "References" column
    # old: I
    references_column = worksheet.column_dimensions['Q']
    references_column.width = 76
    for cell in worksheet['Q']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    references_cell = worksheet['Q1']
    references_cell.font = Font(bold=True)
    references_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Base Score" column
    # old: J
    baseScore_column = worksheet.column_dimensions['F']
    baseScore_column.width = 8
    for cell in worksheet['F']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    baseScore_cell = worksheet['F1']
    baseScore_cell.font = Font(bold=True)
    baseScore_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Base Severity" column
    # old: K
    baseSeverity_column = worksheet.column_dimensions['G']
    baseSeverity_column.width = 10
    for cell in worksheet['G']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    baseSeverity_cell = worksheet['G1']
    baseSeverity_cell.font = Font(bold=True)
    baseSeverity_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Exploitability Score" column
    # old: L
    exploitabilityScore_column = worksheet.column_dimensions['H']
    exploitabilityScore_column.width = 14
    for cell in worksheet['H']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    exploitabilityScore_cell = worksheet['H1']
    exploitabilityScore_cell.font = Font(bold=True)
    exploitabilityScore_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Impact Score" column
    # old: M
    impactScore_column = worksheet.column_dimensions['I']
    impactScore_column.width = 9
    for cell in worksheet['I']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    impactScore_cell = worksheet['I1']
    impactScore_cell.font = Font(bold=True)
    impactScore_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Attack Complexity" column
    # old: N
    attackComplexity_column = worksheet.column_dimensions['J']
    attackComplexity_column.width = 11
    for cell in worksheet['J']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    attackComplexity_cell = worksheet['J1']
    attackComplexity_cell.font = Font(bold=True)
    attackComplexity_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Confidentiality Impact" column
    # old: O
    confidentialityImpact_column = worksheet.column_dimensions['K']
    confidentialityImpact_column.width = 13.5
    for cell in worksheet['K']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    confidentialityImpact_cell = worksheet['K1']
    confidentialityImpact_cell.font = Font(bold=True)
    confidentialityImpact_cell.border = Border(bottom=Side(border_style='thin'))
    
    # Format "Integrity Impact" column
    # old: P
    integrityImpact_column = worksheet.column_dimensions['L']
    integrityImpact_column.width = 8.5
    for cell in worksheet['L']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    integrityImpact_cell = worksheet['L1']
    integrityImpact_cell.font = Font(bold=True)
    integrityImpact_cell.border = Border(bottom=Side(border_style='thin'))

    # Format "Availability Impact" column
    # old: Q
    availabilityImpact_column = worksheet.column_dimensions['M']
    availabilityImpact_column.width = 11
    for cell in worksheet['M']:
        cell.alignment = Alignment(wrap_text=True)
    # Bold specific cells and add a bottom border
    availabilityImpact_cell = worksheet['M1']
    availabilityImpact_cell.font = Font(bold=True)
    availabilityImpact_cell.border = Border(bottom=Side(border_style='thin'))
    
    
    # Center the content in columns A and B
    for row in worksheet.iter_rows(min_row=2, max_col=1, max_row=worksheet.max_row):  # Assuming data starts from the second row
        for cell in row:
            cell.alignment = Alignment(horizontal='right')
    
    # Save the workbook
    workbook.save(excel_file_path)

    print(f'Formatted Excel file "{excel_file_path}" created successfully.')
    return 1
    

def run_command(command):
    print("Running ", command)
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return_code = process.returncode
    if return_code == 0:
        # Command was successful
        print("Output:", output.decode())
        print("Command executed successfully\n")
        
    else:
        # Command failed
        print("Error output:", error.decode())
        print(f"Error executing command. Return code: {return_code}")
        
    return return_code
    
def get_cvssV3_value(cveId, cve_data, variable):
    variable = str(variable)
    if cve_data and variable in cve_data:
        value = cve_data[variable]
        #print(variable + ": ",value)
    else:
        value = "n\a"
        print("["+cveId+"] - No "+variable+" provided in NVD\n")
    return value


 
# Get Network Range
#network_command = "ipconfig"
'''network_command = "arp -a"
print("\nFinding Interface Options ...")
result = run_command(network_command)'''
result = 0
if (result == 0):

    '''network_range_ip = input("Select Interface for scan (xxx.xxx.xxx.xxx): ")
        
    # Get Possible IPs to Scan
    #ip_command = "nmap -sn " + network_range_ip + " | grep 'report for' | cut -d' ' -f5"
    ip_command = "nmap -sn " + network_range_ip + "/24"
    print("\nFinding Possible IPs to scan within network ...")
    result = run_command(ip_command)'''
    if (result == 0):
        '''# Select IP to scan
        user_input = input("Enter IP Address: ")

        # Scan given IP
        #scan_command = "nmap -Pn -oA nmapscanCVE " + user_input
        print("\nRunning Vulnerability Scan ...")
        scan_command = "nmap -Pn --script vuln -oA nmapscanCVE " + user_input
        result = run_command(scan_command)'''
        
        if (result == 0):
            # Parse the XML file
            #tree = ET.parse('nmapscanCVE.xml')
            tree = ET.parse('nmapScanExample.xml')
            root = tree.getroot()

            # Create CSV file
            csv_filename = "SummarizedScanResults.csv"

            ports = root.findall(".//port")
            prescripts = root.findall(".//prescript")

            #Initalize Variables
            key_attr = "-"
            table_refs = "-"
            elem_values = "-"
            title = "-"
            state = "-"
            description = "-"
            cve_data = "-"
            impact_score = "-"
            attackComplexity = "-"
            exploitabilityScore = "-"
            confidentialityImpact = "-"
            integrityImpact = "-"
            availabilityImpact = "-"
            baseScore = "-"
            baseSeverity = "-"

            # Create a CSV file
            with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                # Write header
                writer.writeheader()
                
                for prescript in prescripts:
                    scripts = prescript.findall(".//script")
                    for script in scripts:
                        print("found script")
                        script_id = script.get("id", '')
                        print("scriptid = ", script_id)
                        description = script.get("output", '')
                        print("description = ", description)
                        writer.writerow({'ScriptID': script_id, "Description":description})
                        
                # Write data for each port
                for port in ports:
                    hasScript=0
                    port_id = port.get("portid", '')
                    protocol = port.get("protocol", '')
                    service = port.find('.//service').attrib['name']
                    scripts = port.findall(".//script")
                    for script in scripts:
                        hasScript=1
                        hasVuln=0
                        script_id = script.get("id")
                        tables = script.findall(".//table")
                        for table in tables:
                            key_attr = table.get("key")
                            if key_attr and key_attr.startswith("CVE-") or key_attr.startswith("NMAP-"):
                                hasVuln=1
                                # Find the <table key="refs"> element
                                table_refs = table.find(".//table[@key='refs']")
                                # Extract <elem> values within the <table key="ids"> element
                                elem_values = [elem.text for elem in table_refs.findall(".//elem")]
                                title = table.find(".//elem[@key='title']").text if table.find(".//elem[@key='title']") is not None else ''
                                state = table.find(".//elem[@key='state']").text if table.find(".//elem[@key='state']") is not None else ''
                                description = table.find(".//table[@key='description']/elem").text if table.find(".//table[@key='description']/elem") is not None else ''
                                description = description.strip("[]").replace("\n", "")
                                
                                ## GET additional CVE info from NVD ##
                                if key_attr.startswith("CVE-"):
                                    cve_data = get_jsonFile(key_attr)
                                    if cve_data:
                                        impact_score = get_cvssV3_value(key_attr, cve_data, 'impactScore')
                                        exploitabilityScore = get_cvssV3_value(key_attr, cve_data, 'exploitabilityScore')
                                        if cve_data['cvssV3']:
                                            attackComplexity = get_cvssV3_value(key_attr, cve_data['cvssV3'], 'attackComplexity')
                                            confidentialityImpact = get_cvssV3_value(key_attr, cve_data['cvssV3'], 'confidentialityImpact')
                                            integrityImpact = get_cvssV3_value(key_attr, cve_data['cvssV3'], 'integrityImpact')
                                            availabilityImpact = get_cvssV3_value(key_attr, cve_data['cvssV3'], 'availabilityImpact')
                                            baseScore = get_cvssV3_value(key_attr, cve_data['cvssV3'], 'baseScore')
                                            baseSeverity = get_cvssV3_value(key_attr, cve_data['cvssV3'], 'baseSeverity')
                                    ## Write CVE specific Data ##    
                                    writer.writerow({'PortID': port_id, 'Protocol': protocol, 'Service': service, "ScriptID": script_id, 'CVE': key_attr, 'Title': title, 'State': state, 'Description': description, 'References': elem_values, 'Impact Score':impact_score, 'Attack Complexity':attackComplexity, 'Confidentiality Impact':confidentialityImpact, 'Integrity Impact':integrityImpact, 'Availability Impact':availabilityImpact, 'Base Score':baseScore, 'Base Severity':baseSeverity, 'Exploitability Score':exploitabilityScore})    
                                    
                                else:
                                    ## Write NMAP (Non-CVE) specific Data ##
                                    writer.writerow({'PortID': port_id, 'Protocol': protocol, 'Service': service, "ScriptID": script_id, 'CVE': key_attr, 'Title': title, 'State': state, 'Description': description, 'References': elem_values})
                            
                            # Reset Values (keep port_id, protocol, service, and script_id
                            key_attr = 0
                            table_refs = 0
                            elem_values = 0
                            title = 0
                            state = 0
                            description = 0
                            cve_data = 0
                            impact_score = "n/a"
                            exploitabilityScore = "n/a"
                            attackComplexity = "n/a"
                            confidentialityImpact = "n/a"
                            integrityImpact = "n/a"
                            availabilityImpact = "n/a"
                            baseScore = "n/a"
                            baseSeverity = "n/a"
                        '''-- FOR Table Loop DONE --'''
                        if hasVuln==0:
                            description = script.get("output")
                            description = description.strip("[]").replace("\n", "")
                            # Write Data
                            writer.writerow({'PortID': port_id, 'Protocol': protocol, 'Service': service, 'ScriptID': script_id, 'Description': description})
                        # Reset Script Values
                    if hasScript != 1:
                        writer.writerow({'PortID': port_id, 'Protocol': protocol, 'Service': service, "ScriptID": "none"})
                        

            print(f'CVE information exported to {csv_filename}')

            format_csv(csv_filename)
